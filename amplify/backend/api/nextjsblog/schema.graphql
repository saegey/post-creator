# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY {
#   globalAuthRule: AuthRule = { allow: public }
# } # FOR TESTING ONLY!

type User
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, update, delete, read] }
      { allow: public, operations: [read] }
      { allow: private, provider: iam }
    ]
  ) {
  id: ID!
  fullName: String!
  email: String!
  image: String
  username: String
}

type Blog
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: public, operations: [read] }
      { allow: private, provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  posts: [Post] @hasMany
}

type PublishedPost
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID!
  title: String!
  gpxFile: String
  images: AWSJSON
  headerImage: String
  date: String
  publishedDate: String
  location: String
  postLocation: String
  stravaUrl: String
  resultsUrl: String
  type: String
    @index(
      name: "PublishedPostsByCreatedAt"
      queryField: "listPublishedPostsByCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  subType: String
  teaser: String
  currentFtp: String
  components: AWSJSON
  # powerAnalysis: AWSJSON
  # coordinates: AWSJSON
  # powers: AWSJSON
  # elevation: AWSJSON
  # elevationGrades: AWSJSON
  # distances: AWSJSON
  # blog: Blog @belongsTo
  # related: [Post] @hasMany
  author: AWSJSON
  elevationTotal: Float
  normalizedPower: Float
  distance: Float
  heartAnalysis: AWSJSON
  cadenceAnalysis: AWSJSON
  tempAnalysis: AWSJSON
  elapsedTime: Int
  stoppedTime: Int
  timeInRed: Int
  powerZones: AWSJSON
  timeSeriesFile: String
  powerZoneBuckets: AWSJSON
  createdAt: String!
  heroImage: AWSJSON
  subhead: String
  shortUrl: String
  raceResults: AWSJSON
  raceResultsProvider: String
  originalPostId: String
    @index(
      name: "PublishedPostByOriginalPostId"
      queryField: "PublishedPostByOriginalPostId"
      sortKeyFields: ["createdAt"]
    )
  originalPost: Post @hasOne
}

type Post
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, delete, read, update] }
      # { allow: public, operations: [read] }
      { allow: private, provider: iam }
    ]
  ) {
  type: String!
    @index(
      name: "PostsByCreatedAt"
      queryField: "listPostsByCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  id: ID!
  title: String!
  gpxFile: String
  images: AWSJSON
  headerImage: String
  date: String
  publishedDate: String
  location: String
  postLocation: String
  stravaUrl: String
  resultsUrl: String
  timeSeriesFile: String
  # type: String
  subType: String
  teaser: String
  currentFtp: String
  components: AWSJSON
  # powerAnalysis: AWSJSON
  # coordinates: AWSJSON
  # powers: AWSJSON
  # elevation: AWSJSON
  # elevationGrades: AWSJSON
  # distances: AWSJSON
  blog: Blog @belongsTo
  related: [Post] @hasMany
  author: User @hasOne
  elevationTotal: Float
  normalizedPower: Float
  distance: Float
  heartAnalysis: AWSJSON
  cadenceAnalysis: AWSJSON
  tempAnalysis: AWSJSON
  elapsedTime: Int
  stoppedTime: Int
  timeInRed: Int
  powerZones: AWSJSON
  powerZoneBuckets: AWSJSON
  createdAt: String!
  heroImage: AWSJSON
  subhead: String
  shortUrl: String
  raceResults: AWSJSON
  raceResultsProvider: String
  privacyStatus: String
  # user: User @belongsTo(fields: ["userId"])
  # comments: [Comment] @hasMany
}

# type Comment @model {
#   id: ID!
#   post: Post @belongsTo
#   content: String!
# }
